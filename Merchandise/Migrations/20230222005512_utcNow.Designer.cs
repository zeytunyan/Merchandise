// <auto-generated />
using System;
using DataAccessLayer;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Merchandise.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20230222005512_utcNow")]
    partial class utcNow
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("DataAccessLayer.Entities.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset?>("Confirmed")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.ToTable("Orders", (string)null);
                });

            modelBuilder.Entity("DataAccessLayer.Entities.OrderedProduct", b =>
                {
                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uuid");

                    b.Property<int>("Number")
                        .HasColumnType("integer");

                    b.HasKey("ProductId", "OrderId");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderedProducts", (string)null);
                });

            modelBuilder.Entity("DataAccessLayer.Entities.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Number")
                        .HasColumnType("integer");

                    b.Property<int>("Price")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Products", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("be4073d7-8982-4bcd-96d5-fa9995a6b1b8"),
                            Description = "Cow's milk",
                            Name = "Milk",
                            Number = 100,
                            Price = 100
                        },
                        new
                        {
                            Id = new Guid("acf6afbe-803b-41ca-867d-03350e354206"),
                            Description = "Fresh meat",
                            Name = "Meat",
                            Number = 50,
                            Price = 300
                        },
                        new
                        {
                            Id = new Guid("335a43d0-6b6c-423c-9218-a1e2695d2ba7"),
                            Description = "Ripe bananas",
                            Name = "Bananas",
                            Number = 10,
                            Price = 30
                        },
                        new
                        {
                            Id = new Guid("9fbcef5f-8d6b-47a9-810b-55f9c93442d1"),
                            Description = "A loaf of bread",
                            Name = "Bread",
                            Number = 20,
                            Price = 40
                        },
                        new
                        {
                            Id = new Guid("e8fe41a8-163f-4787-99aa-d42c209b5c8c"),
                            Description = "Bottled water",
                            Name = "Water",
                            Number = 30,
                            Price = 20
                        },
                        new
                        {
                            Id = new Guid("82de0fe6-d60f-4aae-9a5f-855695a85cc1"),
                            Description = "Cheese with mold",
                            Name = "Cheese",
                            Number = 40,
                            Price = 400
                        },
                        new
                        {
                            Id = new Guid("cb4652f6-fed1-4580-a944-20d23c411dc7"),
                            Description = "",
                            Name = "Sausages",
                            Number = 200,
                            Price = 100
                        },
                        new
                        {
                            Id = new Guid("a0653228-011d-4fbb-826c-2ed37d81166d"),
                            Description = "Fresh fish",
                            Name = "Fish",
                            Number = 100,
                            Price = 300
                        },
                        new
                        {
                            Id = new Guid("fd565820-4363-4912-ae81-0c3173811163"),
                            Description = "Red tomatoes",
                            Name = "Tomatoes",
                            Number = 100,
                            Price = 100
                        },
                        new
                        {
                            Id = new Guid("a1164ae0-25f8-448f-9006-f777ad080682"),
                            Description = "Tasty cookies",
                            Name = "Cookies",
                            Number = 15,
                            Price = 100
                        });
                });

            modelBuilder.Entity("DataAccessLayer.Entities.OrderedProduct", b =>
                {
                    b.HasOne("DataAccessLayer.Entities.Order", "Order")
                        .WithMany("ProductAdditions")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccessLayer.Entities.Product", "Product")
                        .WithMany("OrderedOnes")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.Order", b =>
                {
                    b.Navigation("ProductAdditions");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.Product", b =>
                {
                    b.Navigation("OrderedOnes");
                });
#pragma warning restore 612, 618
        }
    }
}
