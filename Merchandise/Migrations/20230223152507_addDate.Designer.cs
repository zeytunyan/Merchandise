// <auto-generated />
using System;
using DataAccessLayer;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Merchandise.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20230223152507_addDate")]
    partial class addDate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("DataAccessLayer.Entities.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset?>("Confirmed")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.ToTable("Orders", (string)null);
                });

            modelBuilder.Entity("DataAccessLayer.Entities.OrderedProduct", b =>
                {
                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("AddDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Number")
                        .HasColumnType("integer");

                    b.HasKey("ProductId", "OrderId");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderedProducts", (string)null);
                });

            modelBuilder.Entity("DataAccessLayer.Entities.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Number")
                        .HasColumnType("integer");

                    b.Property<int>("Price")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Products", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("f62cc352-4493-47c1-886d-749858a9d54c"),
                            Description = "Cow's milk",
                            Name = "Milk",
                            Number = 100,
                            Price = 100
                        },
                        new
                        {
                            Id = new Guid("ca542733-8611-4c97-a86b-753217f96522"),
                            Description = "Fresh meat",
                            Name = "Meat",
                            Number = 50,
                            Price = 300
                        },
                        new
                        {
                            Id = new Guid("e045493d-0301-4789-a8c3-41362aa34bfb"),
                            Description = "Ripe bananas",
                            Name = "Bananas",
                            Number = 10,
                            Price = 30
                        },
                        new
                        {
                            Id = new Guid("4ecdb9eb-b125-4e36-912d-3ac45de2540f"),
                            Description = "A loaf of bread",
                            Name = "Bread",
                            Number = 20,
                            Price = 40
                        },
                        new
                        {
                            Id = new Guid("8f025bc5-7d87-4241-8cda-62f80a27dd36"),
                            Description = "Bottled water",
                            Name = "Water",
                            Number = 30,
                            Price = 20
                        },
                        new
                        {
                            Id = new Guid("12cc3b5e-3334-4ccc-9e9d-e4605a52c6ac"),
                            Description = "Cheese with mold",
                            Name = "Cheese",
                            Number = 40,
                            Price = 400
                        },
                        new
                        {
                            Id = new Guid("a923378b-e8da-478d-856e-4b6e818b9eb4"),
                            Description = "",
                            Name = "Sausages",
                            Number = 200,
                            Price = 100
                        },
                        new
                        {
                            Id = new Guid("e9684898-0c61-4189-aa12-7a1366a5eb3a"),
                            Description = "Fresh fish",
                            Name = "Fish",
                            Number = 100,
                            Price = 300
                        },
                        new
                        {
                            Id = new Guid("cf6c3480-f550-4f02-9af2-3c3c9019690c"),
                            Description = "Red tomatoes",
                            Name = "Tomatoes",
                            Number = 100,
                            Price = 100
                        },
                        new
                        {
                            Id = new Guid("db1f5561-838f-4f6d-8828-50c9f8638576"),
                            Description = "Tasty cookies",
                            Name = "Cookies",
                            Number = 15,
                            Price = 100
                        });
                });

            modelBuilder.Entity("DataAccessLayer.Entities.OrderedProduct", b =>
                {
                    b.HasOne("DataAccessLayer.Entities.Order", "Order")
                        .WithMany("ProductAdditions")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccessLayer.Entities.Product", "Product")
                        .WithMany("OrderedOnes")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.Order", b =>
                {
                    b.Navigation("ProductAdditions");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.Product", b =>
                {
                    b.Navigation("OrderedOnes");
                });
#pragma warning restore 612, 618
        }
    }
}
