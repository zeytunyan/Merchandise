// <auto-generated />
using System;
using DataAccessLayer;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Merchandise.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20230221224900_addProducts")]
    partial class addProducts
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("DataAccessLayer.Entities.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset?>("Confirmed")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.ToTable("Orders", (string)null);
                });

            modelBuilder.Entity("DataAccessLayer.Entities.OrderedProduct", b =>
                {
                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uuid");

                    b.Property<int>("Number")
                        .HasColumnType("integer");

                    b.HasKey("ProductId", "OrderId");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderedProducts", (string)null);
                });

            modelBuilder.Entity("DataAccessLayer.Entities.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Number")
                        .HasColumnType("integer");

                    b.Property<int>("Price")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Products", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("791d8d05-a8c2-4a53-99a6-5aedd14dbbe5"),
                            Description = "Cow's milk",
                            Name = "Milk",
                            Number = 100,
                            Price = 100
                        },
                        new
                        {
                            Id = new Guid("ef21dd3f-6bf6-48a2-93f5-37a6c5d92ab4"),
                            Description = "Fresh meat",
                            Name = "Meat",
                            Number = 50,
                            Price = 300
                        },
                        new
                        {
                            Id = new Guid("fcc25fda-03c0-403f-9528-5bd4c694afe2"),
                            Description = "Ripe bananas",
                            Name = "Bananas",
                            Number = 10,
                            Price = 30
                        },
                        new
                        {
                            Id = new Guid("9b5f93e1-00dc-45be-822d-ccd024818310"),
                            Description = "A loaf of bread",
                            Name = "Bread",
                            Number = 20,
                            Price = 40
                        },
                        new
                        {
                            Id = new Guid("a0ef4a0c-3cf0-4988-be46-42d77d485dbf"),
                            Description = "Bottled water",
                            Name = "Water",
                            Number = 30,
                            Price = 20
                        },
                        new
                        {
                            Id = new Guid("c3ac4aa3-f30a-4835-87ac-7e2ea08b459c"),
                            Description = "Cheese with mold",
                            Name = "Cheese",
                            Number = 40,
                            Price = 400
                        },
                        new
                        {
                            Id = new Guid("55e8f281-8f1e-4c46-acee-24dff9ec4fe6"),
                            Description = "",
                            Name = "Sausages",
                            Number = 200,
                            Price = 100
                        },
                        new
                        {
                            Id = new Guid("ec02d42c-d4cd-459b-8d97-935dfdad44c0"),
                            Description = "Fresh fish",
                            Name = "Fish",
                            Number = 100,
                            Price = 300
                        },
                        new
                        {
                            Id = new Guid("3649561e-c5fa-4f6c-8aaa-46b767e6c96a"),
                            Description = "Red tomatoes",
                            Name = "Tomatoes",
                            Number = 100,
                            Price = 100
                        },
                        new
                        {
                            Id = new Guid("96167e60-2330-4bd9-8d49-f921b998264a"),
                            Description = "Tasty cookies",
                            Name = "Cookies",
                            Number = 15,
                            Price = 100
                        });
                });

            modelBuilder.Entity("DataAccessLayer.Entities.OrderedProduct", b =>
                {
                    b.HasOne("DataAccessLayer.Entities.Order", "Order")
                        .WithMany("ProductAdditions")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccessLayer.Entities.Product", "Product")
                        .WithMany("OrderedOnes")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.Order", b =>
                {
                    b.Navigation("ProductAdditions");
                });

            modelBuilder.Entity("DataAccessLayer.Entities.Product", b =>
                {
                    b.Navigation("OrderedOnes");
                });
#pragma warning restore 612, 618
        }
    }
}
